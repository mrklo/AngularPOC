/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.2.0 (NJsonSchema v10.1.4.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IEmployeeClient {
  get(): Observable<Employee[]>;
}

@Injectable({
  providedIn: 'root'
})
export class EmployeeClient implements IEmployeeClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
  }

  get(): Observable<Employee[]> {
    let url_ = this.baseUrl + "/api/Employee";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGet(<any>response_);
        } catch (e) {
          return <Observable<Employee[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<Employee[]>><any>_observableThrow(response_);
    }));
  }

  protected processGet(response: HttpResponseBase): Observable<Employee[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(Employee.fromJS(item));
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<Employee[]>(<any>null);
  }
}

export interface IFeeClient {
  get(): Observable<Fee[]>;
  postFee(person: Fee): Observable<ApiResponse>;
}

@Injectable({
  providedIn: 'root'
})
export class FeeClient implements IFeeClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
  }

  get(): Observable<Fee[]> {
    let url_ = this.baseUrl + "/api/Fee";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGet(<any>response_);
        } catch (e) {
          return <Observable<Fee[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<Fee[]>><any>_observableThrow(response_);
    }));
  }

  protected processGet(response: HttpResponseBase): Observable<Fee[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(Fee.fromJS(item));
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<Fee[]>(<any>null);
  }

  postFee(person: Fee): Observable<ApiResponse> {
    let url_ = this.baseUrl + "/api/Fee";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(person);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processPostFee(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processPostFee(<any>response_);
        } catch (e) {
          return <Observable<ApiResponse>><any>_observableThrow(e);
        }
      } else
        return <Observable<ApiResponse>><any>_observableThrow(response_);
    }));
  }

  protected processPostFee(response: HttpResponseBase): Observable<ApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ApiResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<ApiResponse>(<any>null);
  }
}

export interface IPersonClient {
  get(): Observable<Person[]>;
  postPerson(person: Person): Observable<ApiResponse>;
}

@Injectable({
  providedIn: 'root'
})
export class PersonClient implements IPersonClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
  }

  get(): Observable<Person[]> {
    let url_ = this.baseUrl + "/api/Person";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGet(<any>response_);
        } catch (e) {
          return <Observable<Person[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<Person[]>><any>_observableThrow(response_);
    }));
  }

  protected processGet(response: HttpResponseBase): Observable<Person[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(Person.fromJS(item));
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<Person[]>(<any>null);
  }

  postPerson(person: Person): Observable<ApiResponse> {
    let url_ = this.baseUrl + "/api/Person";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(person);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processPostPerson(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processPostPerson(<any>response_);
        } catch (e) {
          return <Observable<ApiResponse>><any>_observableThrow(e);
        }
      } else
        return <Observable<ApiResponse>><any>_observableThrow(response_);
    }));
  }

  protected processPostPerson(response: HttpResponseBase): Observable<ApiResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ApiResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<ApiResponse>(<any>null);
  }
}

export interface ITriggerClient {
  get(): Observable<Trigger[]>;
}

@Injectable({
  providedIn: 'root'
})
export class TriggerClient implements ITriggerClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
  }

  get(): Observable<Trigger[]> {
    let url_ = this.baseUrl + "/api/Trigger";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGet(<any>response_);
        } catch (e) {
          return <Observable<Trigger[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<Trigger[]>><any>_observableThrow(response_);
    }));
  }

  protected processGet(response: HttpResponseBase): Observable<Trigger[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(Trigger.fromJS(item));
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<Trigger[]>(<any>null);
  }
}

export interface IWeatherForecastClient {
  get(): Observable<WeatherForecast[]>;
}

@Injectable({
  providedIn: 'root'
})
export class WeatherForecastClient implements IWeatherForecastClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
  }

  get(): Observable<WeatherForecast[]> {
    let url_ = this.baseUrl + "/WeatherForecast";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGet(<any>response_);
        } catch (e) {
          return <Observable<WeatherForecast[]>><any>_observableThrow(e);
        }
      } else
        return <Observable<WeatherForecast[]>><any>_observableThrow(response_);
    }));
  }

  protected processGet(response: HttpResponseBase): Observable<WeatherForecast[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(WeatherForecast.fromJS(item));
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<WeatherForecast[]>(<any>null);
  }
}

export class Employee implements IEmployee {
  id!: number;
  name?: string | undefined;
  nickName?: string | undefined;
  age!: number;

  constructor(data?: IEmployee) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.nickName = _data["nickName"];
      this.age = _data["age"];
    }
  }

  static fromJS(data: any): Employee {
    data = typeof data === 'object' ? data : {};
    let result = new Employee();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["nickName"] = this.nickName;
    data["age"] = this.age;
    return data;
  }

  clone(): Employee {
    const json = this.toJSON();
    let result = new Employee();
    result.init(json);
    return result;
  }
}

export interface IEmployee {
  id: number;
  name?: string | undefined;
  nickName?: string | undefined;
  age: number;
}

export class Fee implements IFee {
  id!: number;
  name?: string | undefined;
  amount!: number;
  feeTypeId?: number | undefined;
  triggerId?: number | undefined;

  constructor(data?: IFee) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.amount = _data["amount"];
      this.feeTypeId = _data["feeTypeId"];
      this.triggerId = _data["triggerId"];
    }
  }

  static fromJS(data: any): Fee {
    data = typeof data === 'object' ? data : {};
    let result = new Fee();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["amount"] = this.amount;
    data["feeTypeId"] = this.feeTypeId;
    data["triggerId"] = this.triggerId;
    return data;
  }

  clone(): Fee {
    const json = this.toJSON();
    let result = new Fee();
    result.init(json);
    return result;
  }
}

export interface IFee {
  id: number;
  name?: string | undefined;
  amount: number;
  feeTypeId?: number | undefined;
  triggerId?: number | undefined;
}

export class ApiResponse implements IApiResponse {
  success!: boolean;
  errors?: string | undefined;

  constructor(data?: IApiResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success = _data["success"];
      this.errors = _data["errors"];
    }
  }

  static fromJS(data: any): ApiResponse {
    data = typeof data === 'object' ? data : {};
    let result = new ApiResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["success"] = this.success;
    data["errors"] = this.errors;
    return data;
  }

  clone(): ApiResponse {
    const json = this.toJSON();
    let result = new ApiResponse();
    result.init(json);
    return result;
  }
}

export interface IApiResponse {
  success: boolean;
  errors?: string | undefined;
}

export class Person implements IPerson {
  id!: number;
  name?: string | undefined;
  ssn?: string | undefined;
  hireDate!: Date;
  isFullTime!: boolean;

  constructor(data?: IPerson) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.ssn = _data["ssn"];
      this.hireDate = _data["hireDate"] ? new Date(_data["hireDate"].toString()) : <any>undefined;
      this.isFullTime = _data["isFullTime"];
    }
  }

  static fromJS(data: any): Person {
    data = typeof data === 'object' ? data : {};
    let result = new Person();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["ssn"] = this.ssn;
    data["hireDate"] = this.hireDate ? this.hireDate.toISOString() : <any>undefined;
    data["isFullTime"] = this.isFullTime;
    return data;
  }

  clone(): Person {
    const json = this.toJSON();
    let result = new Person();
    result.init(json);
    return result;
  }
}

export interface IPerson {
  id: number;
  name?: string | undefined;
  ssn?: string | undefined;
  hireDate: Date;
  isFullTime: boolean;
}

export class Trigger implements ITrigger {
  id!: number;
  name?: string | undefined;
  description?: string | undefined;

  constructor(data?: ITrigger) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.description = _data["description"];
    }
  }

  static fromJS(data: any): Trigger {
    data = typeof data === 'object' ? data : {};
    let result = new Trigger();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["description"] = this.description;
    return data;
  }

  clone(): Trigger {
    const json = this.toJSON();
    let result = new Trigger();
    result.init(json);
    return result;
  }
}

export interface ITrigger {
  id: number;
  name?: string | undefined;
  description?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
  date!: Date;
  temperatureC!: number;
  temperatureF!: number;
  summary?: string | undefined;

  constructor(data?: IWeatherForecast) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
      this.temperatureC = _data["temperatureC"];
      this.temperatureF = _data["temperatureF"];
      this.summary = _data["summary"];
    }
  }

  static fromJS(data: any): WeatherForecast {
    data = typeof data === 'object' ? data : {};
    let result = new WeatherForecast();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["date"] = this.date ? this.date.toISOString() : <any>undefined;
    data["temperatureC"] = this.temperatureC;
    data["temperatureF"] = this.temperatureF;
    data["summary"] = this.summary;
    return data;
  }

  clone(): WeatherForecast {
    const json = this.toJSON();
    let result = new WeatherForecast();
    result.init(json);
    return result;
  }
}

export interface IWeatherForecast {
  date: Date;
  temperatureC: number;
  temperatureF: number;
  summary?: string | undefined;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((<any>event.target).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
